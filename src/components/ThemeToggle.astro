---
// Theme Toggle Component with full accessibility
---

<div class="theme-toggle-container">
  <button
    id="theme-toggle"
    class="theme-toggle focus-visible"
    type="button"
    role="switch"
    aria-checked="false"
    aria-label="Toggle dark mode"
    title="Toggle between light and dark themes"
  >
    <span class="theme-toggle-slider">
      <!-- Sun icon for light mode -->
      <svg
        class="theme-toggle-icon sun-icon"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
        />
      </svg>
      
      <!-- Moon icon for dark mode -->
      <svg
        class="theme-toggle-icon moon-icon hidden"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
        />
      </svg>
    </span>
  </button>
  
  <!-- Screen reader only text for current theme -->
  <span id="theme-status" class="sr-only" aria-live="polite"></span>
</div>

<script>
  class ThemeManager {
    constructor() {
      this.theme = this.getInitialTheme();
      this.toggle = document.getElementById('theme-toggle');
      this.status = document.getElementById('theme-status');
      this.sunIcon = document.querySelector('.sun-icon');
      this.moonIcon = document.querySelector('.moon-icon');
      
      this.init();
    }
    
    getInitialTheme() {
      // Check for saved theme preference
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme) {
        return savedTheme;
      }
      
      // Check system preference
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }
      
      return 'light';
    }
    
    init() {
      // Apply initial theme
      this.applyTheme(this.theme);
      
      // Set up event listeners
      this.toggle?.addEventListener('click', () => this.toggleTheme());
      this.toggle?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleTheme();
        }
      });
      
      // Listen for system theme changes
      if (window.matchMedia) {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        mediaQuery.addEventListener('change', (e) => {
          // Only auto-switch if user hasn't manually set a preference
          if (!localStorage.getItem('theme')) {
            this.theme = e.matches ? 'dark' : 'light';
            this.applyTheme(this.theme);
          }
        });
      }
      
      // Handle page visibility changes to sync across tabs
      document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
          const currentTheme = localStorage.getItem('theme') || this.getSystemTheme();
          if (currentTheme !== this.theme) {
            this.theme = currentTheme;
            this.applyTheme(this.theme);
          }
        }
      });
    }
    
    getSystemTheme() {
      return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }
    
    toggleTheme() {
      this.theme = this.theme === 'light' ? 'dark' : 'light';
      this.applyTheme(this.theme);
      
      // Save preference
      localStorage.setItem('theme', this.theme);
      
      // Announce change to screen readers
      this.announceThemeChange();
      
      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('themechange', {
        detail: { theme: this.theme }
      }));
    }
    
    applyTheme(theme) {
      const html = document.documentElement;
      
      // Remove existing theme classes/attributes
      html.removeAttribute('data-theme');
      html.classList.remove('light', 'dark');
      
      // Apply new theme
      html.setAttribute('data-theme', theme);
      html.classList.add(theme);
      
      // Update toggle button state
      if (this.toggle) {
        this.toggle.setAttribute('aria-checked', theme === 'dark' ? 'true' : 'false');
        this.toggle.setAttribute('aria-label', 
          theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'
        );
      }
      
      // Update icons
      if (theme === 'dark') {
        this.sunIcon?.classList.add('hidden');
        this.moonIcon?.classList.remove('hidden');
      } else {
        this.sunIcon?.classList.remove('hidden');
        this.moonIcon?.classList.add('hidden');
      }
      
      // Update meta theme-color for mobile browsers
      this.updateMetaThemeColor(theme);
    }
    
    updateMetaThemeColor(theme) {
      let metaThemeColor = document.querySelector('meta[name="theme-color"]');
      if (!metaThemeColor) {
        metaThemeColor = document.createElement('meta');
        metaThemeColor.name = 'theme-color';
        document.head.appendChild(metaThemeColor);
      }
      
      metaThemeColor.content = theme === 'dark' ? '#0f172a' : '#ffffff';
    }
    
    announceThemeChange() {
      if (this.status) {
        const message = `Switched to ${this.theme} mode`;
        this.status.textContent = message;
        
        // Clear the message after a short delay
        setTimeout(() => {
          this.status.textContent = '';
        }, 1000);
      }
    }
  }
  
  // Initialize theme manager when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ThemeManager());
  } else {
    new ThemeManager();
  }
  
  // Prevent flash of unstyled content
  (function() {
    const theme = localStorage.getItem('theme') || 
      (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    
    document.documentElement.setAttribute('data-theme', theme);
    document.documentElement.classList.add(theme);
  })();
</script>

<style>
  .theme-toggle-container {
    @apply flex items-center;
  }
  
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  /* Ensure icons are properly sized and positioned */
  .theme-toggle-icon {
    @apply w-3 h-3;
    color: var(--color-text-secondary);
  }
  
  /* Animation for smooth icon transitions */
  .theme-toggle-icon {
    transition: opacity 200ms ease-in-out, transform 200ms ease-in-out;
  }
  
  .theme-toggle-icon.hidden {
    opacity: 0;
    transform: scale(0.8);
  }
  
  /* Focus styles for better accessibility */
  .theme-toggle:focus-visible {
    @apply ring-2 ring-offset-2;
    ring-color: var(--color-primary);
    ring-offset-color: var(--color-background);
  }
</style>