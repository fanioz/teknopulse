---
const currentPath = Astro.url.pathname;
import ThemeToggle from './ThemeToggle.astro';

const navItems = [
  { href: '/', label: 'Home' },
  { href: '/blog', label: 'Blog' },
  { href: '/projects', label: 'Projects' },
  { href: '/contact', label: 'Contact' },
];
---

<nav class="bg-surface/80 backdrop-blur-md border-b border-border sticky top-0 z-50" style="background-color: color-mix(in srgb, var(--color-surface) 80%, transparent);">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center py-4">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2">
        <div class="w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <span class="text-xl font-bold" style="color: var(--color-text);">TeknoPulse</span>
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-6">
        {navItems.map((item) => (
          <a 
            href={item.href}
            class={`text-sm font-medium transition-theme duration-theme ${
              currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href))
                ? '' 
                : ''
            }`}
            style={currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href))
              ? 'color: var(--color-primary);'
              : 'color: var(--color-text-secondary);'
            }
          >
            {item.label}
          </a>
        ))}
        
        <!-- Theme Toggle -->
        <ThemeToggle />
      </div>

      <!-- Mobile Menu Button -->
      <div class="md:hidden flex items-center space-x-2">
        <!-- Mobile Theme Toggle -->
        <ThemeToggle />
        
        <button 
          class="p-2 rounded-lg transition-theme duration-theme focus-visible" 
          style="color: var(--color-text-secondary); background-color: transparent;"
          id="mobile-menu-button"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
        >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div class="md:hidden hidden" id="mobile-menu">
      <div class="py-4 space-y-2">
        {navItems.map((item) => (
          <a 
            href={item.href}
            class={`block px-4 py-2 text-sm font-medium rounded-lg transition-theme duration-theme ${
              currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href))
                ? '' 
                : ''
            }`}
            style={currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href))
              ? 'color: var(--color-primary); background-color: color-mix(in srgb, var(--color-primary) 10%, transparent);'
              : 'color: var(--color-text-secondary);'
            }
          >
            {item.label}
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
    mobileMenu?.classList.toggle('hidden');
    mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
  });
  
  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (!mobileMenuButton?.contains(e.target) && !mobileMenu?.contains(e.target)) {
      mobileMenu?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    }
  });
  
  // Close mobile menu on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !mobileMenu?.classList.contains('hidden')) {
      mobileMenu?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
      mobileMenuButton?.focus();
    }
  });
</script>

<style>
  /* Hover effects using CSS variables */
  nav a:hover {
    color: var(--color-text) !important;
  }
  
  nav a:hover:not([style*="color: var(--color-primary)"]) {
    background-color: color-mix(in srgb, var(--color-surface) 50%, transparent);
  }
  
  #mobile-menu-button:hover {
    color: var(--color-text) !important;
    background-color: var(--color-surface) !important;
  }
</style>