---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';

const allPosts = await getCollection('blog');
const publishedPosts = allPosts.filter(post => !post.data.draft).sort(
  (a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf()
);

const categories = [...new Set(publishedPosts.map(post => post.data.category))];
---

<MainLayout 
  title="Blog - AI Edu-Blog"
  description="Kumpulan artikel tentang AI, machine learning, automation, dan teknologi terdepan untuk transformasi digital."
>
  <section class="section-padding">
    <div class="max-w-7xl mx-auto">
      <!-- Header -->
      <div class="text-center mb-12">
        <h1 class="text-4xl sm:text-5xl font-bold text-dark-text mb-4">Blog</h1>
        <p class="text-xl text-dark-text-secondary max-w-2xl mx-auto">
          Insights, tutorials, dan knowledge sharing tentang AI, machine learning, dan automation
        </p>
      </div>

      <!-- Search and Filter -->
      <div class="mb-12">
        <div class="flex flex-col md:flex-row gap-4">
          <div class="flex-1">
            <input
              type="text"
              id="search-input"
              placeholder="Search articles..."
              class="w-full px-4 py-3 bg-dark-surface border border-dark-border rounded-lg text-dark-text placeholder-dark-text-secondary focus:border-primary focus:ring-2 focus:ring-primary/20 focus:outline-none"
            />
          </div>
          <div>
            <select
              id="category-filter"
              class="px-4 py-3 bg-dark-surface border border-dark-border rounded-lg text-dark-text focus:border-primary focus:ring-2 focus:ring-primary/20 focus:outline-none"
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      <!-- Blog Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="blog-grid">
        {publishedPosts.map((post) => (
          <article class="card group hover:scale-105 transition-transform duration-200" data-category={post.data.category}>
            <!-- Featured Image -->
            <div class="aspect-video bg-gradient-to-br from-primary/20 to-secondary/20 rounded-lg mb-4 flex items-center justify-center">
              <svg class="w-12 h-12 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
            </div>
            
            <!-- Content -->
            <div class="space-y-3">
              <!-- Meta -->
              <div class="flex items-center space-x-2 text-sm">
                <span class="bg-primary/10 text-primary px-2 py-1 rounded-full">
                  {post.data.category}
                </span>
                <span class="text-dark-text-secondary">
                  {post.data.publishDate.toLocaleDateString('id-ID')}
                </span>
              </div>
              
              <!-- Title -->
              <h2 class="text-xl font-semibold text-dark-text group-hover:text-primary transition-colors">
                <a href={`/blog/${post.slug}`}>
                  {post.data.title}
                </a>
              </h2>
              
              <!-- Description -->
              <p class="text-dark-text-secondary line-clamp-3">
                {post.data.description}
              </p>
              
              <!-- Tags -->
              {post.data.tags && (
                <div class="flex flex-wrap gap-2">
                  {post.data.tags.slice(0, 3).map(tag => (
                    <span class="text-xs bg-dark-surface text-dark-text-secondary px-2 py-1 rounded">
                      #{tag}
                    </span>
                  ))}
                </div>
              )}
              
              <!-- Read More -->
              <a 
                href={`/blog/${post.slug}`}
                class="inline-flex items-center text-primary hover:text-primary-400 font-medium group"
              >
                Read Article
                <svg class="w-4 h-4 ml-1 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </a>
            </div>
          </article>
        ))}
      </div>
    </div>
  </section>

  <!-- Newsletter Section -->
  <section class="section-padding bg-dark-surface/50">
    <div class="max-w-4xl mx-auto text-center">
      <h2 class="text-3xl font-bold text-dark-text mb-4">Subscribe to Our Newsletter</h2>
      <p class="text-dark-text-secondary mb-8">
        Get the latest AI insights and tutorials delivered to your inbox weekly
      </p>
      
      <form class="flex flex-col sm:flex-row gap-4 max-w-md mx-auto">
        <input
          type="email"
          placeholder="Enter your email"
          required
          class="flex-1 px-4 py-3 bg-dark-surface border border-dark-border rounded-lg text-dark-text placeholder-dark-text-secondary focus:border-primary focus:ring-2 focus:ring-primary/20 focus:outline-none"
        />
        <button
          type="submit"
          class="btn-primary whitespace-nowrap"
        >
          Subscribe
        </button>
      </form>
    </div>
  </section>
</MainLayout>

<script>
  // Search and Filter Functionality
  const searchInput = document.getElementById('search-input');
  const categoryFilter = document.getElementById('category-filter');
  const blogGrid = document.getElementById('blog-grid');
  const articles = Array.from(blogGrid?.children || []);

  function filterArticles() {
    const searchTerm = searchInput?.value.toLowerCase() || '';
    const selectedCategory = categoryFilter?.value || '';

    articles.forEach(article => {
      const title = article.querySelector('h2')?.textContent.toLowerCase() || '';
      const description = article.querySelector('p')?.textContent.toLowerCase() || '';
      const category = article.getAttribute('data-category') || '';

      const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
      const matchesCategory = !selectedCategory || category === selectedCategory;

      if (matchesSearch && matchesCategory) {
        article.style.display = 'block';
      } else {
        article.style.display = 'none';
      }
    });
  }

  searchInput?.addEventListener('input', filterArticles);
  categoryFilter?.addEventListener('change', filterArticles);
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
</MainLayout>